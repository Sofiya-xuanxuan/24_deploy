'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var nervjs = require('nervjs');
var Taro = require('@tarojs/taro-h5');
var Taro__default = _interopDefault(Taro);
var mobxCommon = require('@tarojs/mobx-common');

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function createStoreInjector(grabStoresFn, injectNames, sourceComponent) {
  var Injector =
  /*#__PURE__*/
  function (_Component) {
    _inherits(Injector, _Component);

    function Injector() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, Injector);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Injector)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "__observeInstance", void 0);

      return _this;
    }

    _createClass(Injector, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var originProps = mobxCommon.mapStoreToProps(grabStoresFn, this.props);
        return nervjs.createElement(sourceComponent, _objectSpread({}, originProps, {
          ref: function ref(_ref) {
            originProps.ref && originProps.ref(_ref);

            if (_ref) {
              _this2.__observeInstance = _ref;
            }
          }
        }));
      }
    }, {
      key: "componentDidShow",
      value: function componentDidShow() {
        var componentDidShow = sourceComponent.prototype.componentDidShow;

        if (typeof componentDidShow === 'function') {
          componentDidShow.call(this.__observeInstance);
        }
      }
    }, {
      key: "componentDidHide",
      value: function componentDidHide() {
        var componentDidHide = sourceComponent.prototype.componentDidHide;

        if (typeof componentDidHide === 'function') {
          componentDidHide.call(this.__observeInstance);
        }
      }
    }]);

    return Injector;
  }(Taro.Component);

  _defineProperty(Injector, "isMobxInjector", true);

  _defineProperty(Injector, "config", sourceComponent.config || {});

  _defineProperty(Injector, "displayName", mobxCommon.generateDisplayName(sourceComponent, injectNames));

  return Injector;
}

var Provider =
/*#__PURE__*/
function (_Taro$Component) {
  _inherits(Provider, _Taro$Component);

  function Provider(props) {
    var _this;

    _classCallCheck(this, Provider);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Provider).call(this, props));
    mobxCommon.setStore(props.store);
    return _this;
  }

  _createClass(Provider, [{
    key: "render",
    value: function render() {
      return nervjs.Children.only(this.props.children);
    }
  }]);

  return Provider;
}(Taro__default.Component);

function inject() {
  return mobxCommon.inject.apply(void 0, Array.prototype.slice.call(arguments).concat([createStoreInjector]));
}
function observer(Component) {
  return mobxCommon.observer(Component, 'render');
}

exports.onError = mobxCommon.onError;
exports.inject = inject;
exports.observer = observer;
exports.Provider = Provider;
